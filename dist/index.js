"use strict";var b=function(a,r){return function(){return r||a((r={exports:{}}).exports,r),r.exports}};var T=b(function(z,E){"use strict";function I(a,r,t,o,v,m,e,s,d){var h,l,i,n;for(h=m,i=0;i<a;i++){for(l=d,n=0;n<r&&t[h+n*v]===e[l];n++)l+=s;if(n===r)return i;h+=o}return-1}E.exports=I});var F=b(function(G,k){"use strict";var q=require("@stdlib/assert-is-nonnegative-integer").isPrimitive,j=require("@stdlib/assert-is-positive-integer"),A=require("@stdlib/assert-is-integer").isPrimitive,O=require("@stdlib/assert-is-function-array"),x=require("@stdlib/assert-is-function"),V=require("@stdlib/assert-is-collection"),P=require("@stdlib/assert-is-ndarray-like"),u=require("@stdlib/string-format"),U=require("@stdlib/ndarray-dtype"),B=require("@stdlib/ndarray-base-dtype-resolve-enum"),C=require("@stdlib/ndarray-base-dtypes2enums"),N=T();function S(a,r,t,o,v,m){var e,s,d;if(x(a))d=a;else if(!O(a))throw new TypeError(u("invalid argument. First argument must be either a function or an array of functions. Value: `%s`.",a));if(!V(r))throw new TypeError(u("invalid argument. Second argument must be an array-like object. Value: `%s`.",r));if(!V(t)&&t!==null)throw new TypeError(u("invalid argument. Third argument must be an array-like object or null. Value: `%s`.",t));if(!j(o))throw new TypeError(u("invalid argument. Fourth argument must be a positive integer. Value: `%s`.",o));if(!q(v))throw new TypeError(u("invalid argument. Fifth argument must be a nonnegative integer. Value: `%s`.",v));if(!q(m))throw new TypeError(u("invalid argument. Sixth argument must be a nonnegative integer. Value: `%s`.",m));if(e=v+m,e===0)throw new Error("invalid arguments. Interface must accept at least one input and/or output ndarray. Based on the provided arguments, `nin+nout` equals `0`.");if(o!==e+1)throw new Error("invalid arguments. Fourth argument is not compatible with the number of input and output ndarrays.");if(d){if(s=r.length/e,!A(s))throw new Error("invalid argument. Unexpected number of types. A type must be specified for each input and output ndarray for each provided ndarray function.")}else if(s=a.length,r.length!==s*e)throw new Error("invalid argument. Unexpected number of types. A type must be specified for each input and output ndarray for each provided ndarray function.");if(t&&t.length!==s)throw new Error("invalid argument. The third argument must have the same number of elements as the first argument.");return r=C(r),h;function h(){var l,i,n,f,p,y,g,w,c;if(f=arguments.length,f!==o){if(f<o)throw new Error("invalid invocation. Insufficient arguments.");if(f===o+1)f-=1,l=arguments[f];else throw new Error("invalid invocation. Too many arguments.")}if(p=arguments[f-1],!x(p))throw new TypeError(u("invalid argument. Callback argument must be a function. Value: `%s`.",p));for(i=[],n=[],c=0;c<e;c++){if(g=arguments[c],!P(g))throw c<v?new TypeError(u("invalid argument. Input array must be an ndarray-like object. Value: `%s`.",g)):new TypeError(u("invalid argument. Output array must be an ndarray-like object. Value: `%s`.",g));i.push(g),n.push(B(U(g)))}if(y=N(s,e,r,e,1,0,n,1,0),y<0)throw new TypeError("invalid arguments. Unable to resolve an ndarray function supporting the provided array argument data types.");if(d?w=d:w=a[y],t?w(i,t[y],p,l):w(i,p,l),m===1)return i[e-1];if(m!==0)return i.slice(v)}}k.exports=S});var D=F();module.exports=D;
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
//# sourceMappingURL=index.js.map
