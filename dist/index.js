"use strict";var b=function(i,r){return function(){return r||i((r={exports:{}}).exports,r),r.exports}};var T=b(function(z,E){"use strict";function j(i,r,e,o,v,m,n,s,d){var g,l,t,a;for(g=m,t=0;t<i;t++){for(l=d,a=0;a<r&&e[g+a*v]===n[l];a++)l+=s;if(a===r)return t;g+=o}return-1}E.exports=j});var I=b(function(G,F){"use strict";var q=require("@stdlib/assert-is-nonnegative-integer").isPrimitive,A=require("@stdlib/assert-is-positive-integer"),O=require("@stdlib/assert-is-integer").isPrimitive,P=require("@stdlib/assert-is-function-array"),x=require("@stdlib/assert-is-function"),V=require("@stdlib/assert-is-collection"),U=require("@stdlib/assert-is-ndarray-like"),u=require("@stdlib/string-format"),B=require("@stdlib/ndarray-dtype"),k=require("@stdlib/ndarray-base-dtype-resolve-enum"),C=T();function N(i){var r,e;for(r=[],e=0;e<i.length;e++)r.push(k(i[e]));return r}function S(i,r,e,o,v,m){var n,s,d;if(x(i))d=i;else if(!P(i))throw new TypeError(u("invalid argument. First argument must be either a function or an array of functions. Value: `%s`.",i));if(!V(r))throw new TypeError(u("invalid argument. Second argument must be an array-like object. Value: `%s`.",r));if(!V(e)&&e!==null)throw new TypeError(u("invalid argument. Third argument must be an array-like object or null. Value: `%s`.",e));if(!A(o))throw new TypeError(u("invalid argument. Fourth argument must be a positive integer. Value: `%s`.",o));if(!q(v))throw new TypeError(u("invalid argument. Fifth argument must be a nonnegative integer. Value: `%s`.",v));if(!q(m))throw new TypeError(u("invalid argument. Sixth argument must be a nonnegative integer. Value: `%s`.",m));if(n=v+m,n===0)throw new Error("invalid arguments. Interface must accept at least one input and/or output ndarray. Based on the provided arguments, `nin+nout` equals `0`.");if(o!==n+1)throw new Error("invalid arguments. Fourth argument is not compatible with the number of input and output ndarrays.");if(d){if(s=r.length/n,!O(s))throw new Error("invalid argument. Unexpected number of types. A type must be specified for each input and output ndarray for each provided ndarray function.")}else if(s=i.length,r.length!==s*n)throw new Error("invalid argument. Unexpected number of types. A type must be specified for each input and output ndarray for each provided ndarray function.");if(e&&e.length!==s)throw new Error("invalid argument. The third argument must have the same number of elements as the first argument.");return r=N(r),g;function g(){var l,t,a,f,p,w,h,y,c;if(f=arguments.length,f!==o){if(f<o)throw new Error("invalid invocation. Insufficient arguments.");if(f===o+1)f-=1,l=arguments[f];else throw new Error("invalid invocation. Too many arguments.")}if(p=arguments[f-1],!x(p))throw new TypeError(u("invalid argument. Callback argument must be a function. Value: `%s`.",p));for(t=[],a=[],c=0;c<n;c++){if(h=arguments[c],!U(h))throw c<v?new TypeError(u("invalid argument. Input array must be an ndarray-like object. Value: `%s`.",h)):new TypeError(u("invalid argument. Output array must be an ndarray-like object. Value: `%s`.",h));t.push(h),a.push(k(B(h)))}if(w=C(s,n,r,n,1,0,a,1,0),w<0)throw new TypeError("invalid arguments. Unable to resolve an ndarray function supporting the provided array argument data types.");if(d?y=d:y=i[w],e?y(t,e[w],p,l):y(t,p,l),m===1)return t[n-1];if(m!==0)return t.slice(v)}}F.exports=S});var D=I();module.exports=D;
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
//# sourceMappingURL=index.js.map
