{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/index_of_types.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isPositiveInteger from '@stdlib/assert-is-positive-integer';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport isFunctionArray from '@stdlib/assert-is-function-array';\nimport isFunction from '@stdlib/assert-is-function';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport getDType from '@stdlib/ndarray-dtype';\nimport resolveEnum from '@stdlib/ndarray-base-dtype-resolve-enum';\nimport indexOfTypes from './index_of_types.js';\n\n\n// FUNCTIONS //\n\n/**\n* Returns a list of data type enumeration constants.\n*\n* @private\n* @param {Collection} types - list of types\n* @returns {IntegerArray} list of data type enumeration constants\n*/\nfunction types2enums( types ) {\n\tvar out;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < types.length; i++ ) {\n\t\tout.push( resolveEnum( types[ i ] ) );\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Returns an ndarray function interface which accepts a callback function and performs multiple dispatch.\n*\n* @param {(FunctionArray|Function)} fcns - list of ndarray functions\n* @param {Collection} types - one-dimensional list of ndarray argument data types\n* @param {(Collection|null)} data - ndarray function data (e.g., function(s) to apply)\n* @param {PositiveInteger} nargs - total number of ndarray function interface arguments (including the callback function, but excluding the callback execution context)\n* @param {NonNegativeInteger} nin - number of input ndarrays\n* @param {NonNegativeInteger} nout - number of output ndarrays\n* @throws {TypeError} first argument must be either a function or an array of functions\n* @throws {TypeError} second argument must be an array-like object\n* @throws {TypeError} third argument must be an array-like object or `null`\n* @throws {Error} third and first arguments must have the same number of elements\n* @throws {TypeError} fourth argument must be a positive integer\n* @throws {TypeError} fifth argument must be a nonnegative integer\n* @throws {TypeError} sixth argument must be a nonnegative integer\n* @throws {Error} fourth argument must be compatible with the specified number of input and output arrays\n* @throws {Error} number of types must match the number of functions times the total number of array arguments for each function\n* @throws {Error} interface must accept at least one input and/or output ndarray\n* @returns {Function} ndarray function interface\n*\n* @example\n* import unaryBy from '@stdlib/ndarray-base-unary-by';\n* import abs from '@stdlib/math-base-special-abs';\n* import identity from '@stdlib/math-base-special-identity';\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray from '@stdlib/ndarray-ctor';\n*\n* var types = [\n*     'float64', 'float64'\n* ];\n*\n* var data = [\n*     abs\n* ];\n*\n* var absolute = dispatchBy( unaryBy, types, data, 3, 1, 1 );\n*\n* // ...\n*\n* var xbuf = new Float64Array( [ -1.0, -2.0, -3.0, -4.0, -5.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* var x = ndarray( 'float64', xbuf, [ 5 ], [ 1 ], 0, 'row-major' );\n* var y = ndarray( 'float64', ybuf, [ 5 ], [ 1 ], 0, 'row-major' );\n*\n* absolute( x, y, identity );\n* // ybuf => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction dispatchBy( fcns, types, data, nargs, nin, nout ) {\n\tvar narrays;\n\tvar nfcns;\n\tvar fcn;\n\n\tif ( isFunction( fcns ) ) {\n\t\tfcn = fcns;\n\t} else if ( !isFunctionArray( fcns ) ) {\n\t\tthrow new TypeError( format( '1dX5d', fcns ) );\n\t}\n\tif ( !isCollection( types ) ) {\n\t\tthrow new TypeError( format( '1dX2y', types ) );\n\t}\n\tif ( !isCollection( data ) && data !== null ) {\n\t\tthrow new TypeError( format( '1dX5e', data ) );\n\t}\n\tif ( !isPositiveInteger( nargs ) ) {\n\t\tthrow new TypeError( format( '1dX5f', nargs ) );\n\t}\n\tif ( !isNonNegativeInteger( nin ) ) {\n\t\tthrow new TypeError( format( '1dX5X', nin ) );\n\t}\n\tif ( !isNonNegativeInteger( nout ) ) {\n\t\tthrow new TypeError( format( '1dX5g', nout ) );\n\t}\n\tnarrays = nin + nout;\n\tif ( narrays === 0 ) {\n\t\tthrow new Error( format('1dX0h') );\n\t}\n\tif ( nargs !== narrays+1 ) {\n\t\tthrow new Error( format('1dXCy') );\n\t}\n\tif ( fcn ) {\n\t\tnfcns = types.length / narrays;\n\t\tif ( !isInteger( nfcns ) ) {\n\t\t\tthrow new Error( format('1dX0j') );\n\t\t}\n\t} else {\n\t\tnfcns = fcns.length;\n\t\tif ( types.length !== nfcns*narrays ) {\n\t\t\tthrow new Error( format('1dX0j') );\n\t\t}\n\t}\n\tif ( data && data.length !== nfcns ) {\n\t\tthrow new Error( format('1dX0k') );\n\t}\n\ttypes = types2enums( types );\n\treturn dispatcher;\n\n\t/**\n\t* ndarray function interface which performs multiple dispatch.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - ndarray\n\t* @param {...ndarrayLike} args - ndarray arguments\n\t* @param {Callback} clbk - callback function\n\t* @param {*} [thisArg] - callback function execution context\n\t* @throws {Error} insufficient arguments\n\t* @throws {Error} too many arguments\n\t* @throws {TypeError} input array arguments must be ndarray-like objects\n\t* @throws {TypeError} output array arguments must be ndarray-like objects\n\t* @throws {TypeError} unable to resolve an ndarray function supporting the provided ndarray argument data types\n\t* @throws {TypeError} callback argument must be a function\n\t* @returns {(ndarrayLike|Array<ndarrayLike>|void)} destination array(s)\n\t*/\n\tfunction dispatcher() {\n\t\tvar thisArg;\n\t\tvar arrays;\n\t\tvar dtypes;\n\t\tvar argc;\n\t\tvar clbk;\n\t\tvar idx;\n\t\tvar v;\n\t\tvar f;\n\t\tvar i;\n\n\t\targc = arguments.length;\n\t\tif ( argc !== nargs ) {\n\t\t\tif ( argc < nargs ) {\n\t\t\t\tthrow new Error( format('1dX0l') );\n\t\t\t}\n\t\t\t// Check for a callback execution context argument...\n\t\t\tif ( argc === nargs+1 ) {\n\t\t\t\targc -= 1;\n\t\t\t\tthisArg = arguments[ argc ];\n\t\t\t} else {\n\t\t\t\tthrow new Error( format('1dX0m') );\n\t\t\t}\n\t\t}\n\t\tclbk = arguments[ argc-1 ];\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( format( '1dX2b', clbk ) );\n\t\t}\n\t\tarrays = [];\n\t\tdtypes = [];\n\t\tfor ( i = 0; i < narrays; i++ ) {\n\t\t\tv = arguments[ i ];\n\t\t\tif ( !isndarrayLike( v ) ) {\n\t\t\t\tif ( i < nin ) {\n\t\t\t\t\tthrow new TypeError( format( '1dX5h', v ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( '1dX5i', v ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\tarrays.push( v );\n\t\t\tdtypes.push( resolveEnum( getDType( v ) ) );\n\t\t}\n\t\t// Resolve the ndarray function satisfying the input array types:\n\t\tidx = indexOfTypes( nfcns, narrays, types, narrays, 1, 0, dtypes, 1, 0 ); // eslint-disable-line max-len\n\n\t\t// Check whether we were able to successfully resolve an ndarray function:\n\t\tif ( idx < 0 ) {\n\t\t\tthrow new TypeError( format('1dX0n') );\n\t\t}\n\t\t// Retrieve the ndarray function:\n\t\tif ( fcn ) {\n\t\t\tf = fcn;\n\t\t} else {\n\t\t\tf = fcns[ idx ];\n\t\t}\n\t\t// Evaluate the ndarray function:\n\t\tif ( data ) {\n\t\t\tf( arrays, data[ idx ], clbk, thisArg );\n\t\t} else {\n\t\t\tf( arrays, clbk, thisArg );\n\t\t}\n\t\tif ( nout === 1 ) {\n\t\t\treturn arrays[ narrays-1 ];\n\t\t}\n\t\tif ( nout === 0 ) {\n\t\t\treturn;\n\t\t}\n\t\treturn arrays.slice( nin );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default dispatchBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the first row index at which a given one-dimensional array of types can be found in a two-dimensional reference array of types (or `-1` if not found).\n*\n* ## Notes\n*\n* -   The intended use case for this function is for type dispatch (i.e., given a set of array data types, find a matching interface according the interface's accepted array data types).\n* -   The function assumes that `x` is stored in row-major order.\n* -   The function assumes that the number of indexed elements in `y` equals the number of columns in `x`.\n* -   The function returns a row index. To convert to a linear index, multiply `strideX1` by the return value.\n*\n* @private\n* @param {NonNegativeInteger} N - number of rows in `x` (size of first dimension)\n* @param {NonNegativeInteger} M - number of columns in `x` (size of second dimension)\n* @param {ArrayLikeObject} x - input two-dimensional reference array\n* @param {integer} strideX1 - `x` stride length along first dimension\n* @param {integer} strideX2 - `x` stride length along second dimension\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {ArrayLikeObject} y - search array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {integer} row index (if found) and `-1` otherwise\n*\n* @example\n* // Define a reference array to search:\n* var types = [\n*     'float64', 'float64', 'float64',\n*     'float32', 'float32', 'float32',\n*     'uint32', 'uint32', 'float64',\n*     'int32', 'int32', 'float64',\n*     'uint16', 'uint16', 'float64',\n*     'int16', 'int16', 'float64',\n*     'uint8', 'uint8', 'float64',\n*     'int8', 'int8', 'float64'\n* ];\n*\n* // Define reference array dimensions:\n* var N = 8; // rows\n* var M = 3; // columns\n*\n* // Define a search array:\n* y1 = [\n*     'float32', 'float32', 'float32',\n* ];\n*\n* // Find the list of types:\n* var r1 = indexOfTypes( N, M, types, M, 1, 0, y1, 1, 0 );\n* // returns 1\n*\n// Define a search array:\n* y2 = [\n*     'float32', 'float32', 'float64',\n* ];\n*\n* // Find the list of types:\n* var r2 = indexOfTypes( N, M, types, M, 1, 0, y2, 1, 0 );\n* // returns -1\n*/\nfunction indexOfTypes( N, M, x, strideX1, strideX2, offsetX, y, strideY, offsetY ) { // eslint-disable-line max-len\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tvar j;\n\n\t// Search for the first row which matches `y`...\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tiy = offsetY;\n\t\tfor ( j = 0; j < M; j++ ) {\n\t\t\tif ( x[ ix+(j*strideX2) ] !== y[ iy ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tiy += strideY;\n\t\t}\n\t\t// If we successfully iterated over all columns, then that means we've found a match...\n\t\tif ( j === M ) {\n\t\t\treturn i;\n\t\t}\n\t\tix += strideX1;\n\t}\n\treturn -1;\n}\n\n\n// EXPORTS //\n\nexport default indexOfTypes;\n"],"names":["dispatchBy","fcns","types","data","nargs","nin","nout","narrays","nfcns","fcn","isFunction","isFunctionArray","TypeError","format","isCollection","isPositiveInteger","isNonNegativeInteger","Error","length","isInteger","out","i","push","resolveEnum","types2enums","thisArg","arrays","dtypes","argc","clbk","idx","v","f","arguments","isndarrayLike","getDType","N","M","x","strideX1","strideX2","offsetX","y","strideY","offsetY","ix","iy","j","indexOfTypes","slice"],"mappings":"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"}